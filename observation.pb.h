// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: observation.proto

#ifndef PROTOBUF_observation_2eproto__INCLUDED
#define PROTOBUF_observation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace moos_hello {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_observation_2eproto();
void protobuf_AssignDesc_observation_2eproto();
void protobuf_ShutdownFile_observation_2eproto();

class Point;
class Observation;
class Observations;

// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:moos_hello.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_observation_2eproto();
  friend void protobuf_AssignDesc_observation_2eproto();
  friend void protobuf_ShutdownFile_observation_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Observation : public ::google::protobuf::Message {
 public:
  Observation();
  virtual ~Observation();

  Observation(const Observation& from);

  inline Observation& operator=(const Observation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Observation& default_instance();

  void Swap(Observation* other);

  // implements Message ----------------------------------------------

  Observation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Observation& from);
  void MergeFrom(const Observation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .moos_hello.Point point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline const ::moos_hello::Point& point() const;
  inline ::moos_hello::Point* mutable_point();
  inline ::moos_hello::Point* release_point();
  inline void set_allocated_point(::moos_hello::Point* point);

  // @@protoc_insertion_point(class_scope:moos_hello.Observation)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::moos_hello::Point* point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_observation_2eproto();
  friend void protobuf_AssignDesc_observation_2eproto();
  friend void protobuf_ShutdownFile_observation_2eproto();

  void InitAsDefaultInstance();
  static Observation* default_instance_;
};
// -------------------------------------------------------------------

class Observations : public ::google::protobuf::Message {
 public:
  Observations();
  virtual ~Observations();

  Observations(const Observations& from);

  inline Observations& operator=(const Observations& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Observations& default_instance();

  void Swap(Observations* other);

  // implements Message ----------------------------------------------

  Observations* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Observations& from);
  void MergeFrom(const Observations& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .moos_hello.Observation observation = 1;
  inline int observation_size() const;
  inline void clear_observation();
  static const int kObservationFieldNumber = 1;
  inline const ::moos_hello::Observation& observation(int index) const;
  inline ::moos_hello::Observation* mutable_observation(int index);
  inline ::moos_hello::Observation* add_observation();
  inline const ::google::protobuf::RepeatedPtrField< ::moos_hello::Observation >&
      observation() const;
  inline ::google::protobuf::RepeatedPtrField< ::moos_hello::Observation >*
      mutable_observation();

  // @@protoc_insertion_point(class_scope:moos_hello.Observations)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::moos_hello::Observation > observation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_observation_2eproto();
  friend void protobuf_AssignDesc_observation_2eproto();
  friend void protobuf_ShutdownFile_observation_2eproto();

  void InitAsDefaultInstance();
  static Observations* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// required int32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Observation

// optional string name = 1;
inline bool Observation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Observation::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Observation::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Observation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Observation::name() const {
  return *name_;
}
inline void Observation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Observation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Observation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Observation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Observation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Observation::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .moos_hello.Point point = 2;
inline bool Observation::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Observation::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Observation::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Observation::clear_point() {
  if (point_ != NULL) point_->::moos_hello::Point::Clear();
  clear_has_point();
}
inline const ::moos_hello::Point& Observation::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::moos_hello::Point* Observation::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::moos_hello::Point;
  return point_;
}
inline ::moos_hello::Point* Observation::release_point() {
  clear_has_point();
  ::moos_hello::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Observation::set_allocated_point(::moos_hello::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
}

// -------------------------------------------------------------------

// Observations

// repeated .moos_hello.Observation observation = 1;
inline int Observations::observation_size() const {
  return observation_.size();
}
inline void Observations::clear_observation() {
  observation_.Clear();
}
inline const ::moos_hello::Observation& Observations::observation(int index) const {
  return observation_.Get(index);
}
inline ::moos_hello::Observation* Observations::mutable_observation(int index) {
  return observation_.Mutable(index);
}
inline ::moos_hello::Observation* Observations::add_observation() {
  return observation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::moos_hello::Observation >&
Observations::observation() const {
  return observation_;
}
inline ::google::protobuf::RepeatedPtrField< ::moos_hello::Observation >*
Observations::mutable_observation() {
  return &observation_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace moos_hello

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_observation_2eproto__INCLUDED
